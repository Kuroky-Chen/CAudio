import PCMPlayer from"pcm-player";class CAudio{constructor(e){this.config=e;const{url:t,params:n,audioType:r,token:s,sampleRate:i,bufferSize:a,volume:o,flushTime:l,inputCodec:h,channels:u}=e;this.player=null,this.apiUrl=t||"",this.params=n||"",this.audioType=r||"wav",this.token=s||"",this.sampleRate=i||16e3,this.bufferSize=a||16e3,this.volume=o||1,this.flushTime=l||200,this.channels=u||1,this.inputCodec=h||"Int16",this.init()}play(){const e=this;try{const t=new Headers;t.append("Authorization",this.token),t.append("Accept",`audio/${this.audioType}`);const n=this.controller.signal,r=new Uint8Array(this.bufferSize);let s=0;fetch(this.apiUrl+"?"+this.params.toString(),{headers:t,signal:n}).then((e=>{const t=e.body.getReader();return new ReadableStream({start:e=>function n(){return t.read().then((({done:t,value:r})=>{if(!t)return e.enqueue(r),n();e.close()}))}()})})).then((t=>{const n=t.getReader();return new Response(new ReadableStream({start(t){const i=()=>n.read().then((({done:n,value:a})=>{if(n)return void t.close();const o=new Uint8Array(a.buffer);for(let t=0;t<o.length;t++)r[s]=o[t],s++,s>=e.bufferSize&&(e.player.feed(r),s=0);return i()}));return i()}}))})).catch((e=>{}))}catch(e){console.error(e)}}stop(){try{this.player.pause(),this.controller.abort()}catch{err}console.warn(err),this.player=null,this.init()}init(){this.controller=new AbortController,this.audioBuffer=[],this.player=new PCMPlayer({inputCodec:this.inputCodec,channels:this.channels,sampleRate:this.sampleRate,flushTime:this.flushTime,onstatechange:(e,t,n)=>(console.log("type",e,t,n),{}),onended:(e,t)=>(console.log("end fire",e,t),{})}),this.player.volume(this.volume)}}export default CAudio;