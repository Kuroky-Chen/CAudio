import PCMPlayer from"pcm-player";class CAudio{constructor(e){this.config=e;const{url:t,params:r,audioType:i,token:s,sampleRate:n,bufferSize:a,volume:o,flushTime:l,inputCodec:h,channels:u,bufferFirstWaitTime:f,bufferIntervalWaitTime:c,bufferIntervalPlayTime:p}=e;this.player=null,this.apiUrl=t||"",this.params=r||"",this.audioType=i||"wav",this.token=s||"",this.inputCodec=h||"Int16",this.sampleRate=n||16e3,this.bufferSize=a||6400,this.bufferFirstWaitTime=f||1e4,this.bufferIntervalWaitTime=c||5e3,this.bufferIntervalPlayTime=p||200,this.volume=o||1,this.flushTime=l||200,this.channels=u||1,this.init()}play(){const e=this;try{const t=new Headers;t.append("Authorization",this.token),t.append("Accept",`audio/${this.audioType}`);const r=this.controller.signal;let i;const s=t=>{setTimeout((()=>{i=setInterval((()=>{n()}),e.bufferIntervalPlayTime)}),t)},n=()=>{if(e.bufferPool.length>e.bufferSize){const t=e.bufferPool.splice(0,e.bufferSize);e.player.feed(new Uint8Array(t))}else clearInterval(i),s(e.bufferIntervalWaitTime)};fetch(this.apiUrl+"?"+this.params.toString(),{headers:t,signal:r}).then((e=>{const t=e.body.getReader();return new ReadableStream({start:e=>function r(){return t.read().then((({done:t,value:i})=>{if(!t)return e.enqueue(i),r();e.close()}))}()})})).then((t=>{const r=t.getReader();return new Response(new ReadableStream({start(t){const i=()=>r.read().then((({done:r,value:s})=>{if(r)return void t.close();const n=Array.from(s);return e.bufferPool.push(...n),i()}));return s(e.bufferFirstWaitTime),i()}}))})).catch((e=>{console.error(e)}))}catch(e){console.error(e)}}stop(){try{this.player.pause(),this.controller.abort()}catch(e){console.warn(e)}this.player=null,this.init()}init(){this.controller=new AbortController,this.bufferPool=[],this.player=new PCMPlayer({inputCodec:this.inputCodec,channels:this.channels,sampleRate:this.sampleRate,flushTime:this.flushTime,onstatechange:(e,t,r)=>(console.log("type",e,t,r),{}),onended:(e,t)=>(console.log("end fire",e,t),{})}),this.player.volume(this.volume)}}export default CAudio;