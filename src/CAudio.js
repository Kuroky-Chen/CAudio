import PCMPlayer from"pcm-player";class CAudio{constructor(e){this.config=e;const{url:t,params:n,audioType:r,token:s,sampleRate:i,bufferSize:a,volume:o,flushTime:l,inputCodec:h,channels:u}=e;this.player=null,this.apiUrl=t||"",this.params=n||"",this.audioType=r||"wav",this.token=s||"",this.sampleRate=i||16e3,this.bufferSize=a||16e3,this.volume=o||1,this.flushTime=l||200,this.channels=u||1,this.inputCodec=h||"Int16",this.init()}play(){try{const e=new Headers;e.append("Authorization",this.token),e.append("Accept",`audio/${this.audioType}`);const t=this.controller.signal,n=new Uint8Array(this.bufferSize);let r=0;fetch(this.apiUrl+"?"+this.params.toString(),{headers:e,signal:t}).then((e=>{const t=e.body.getReader();return new ReadableStream({start:e=>function n(){return t.read().then((({done:t,value:r})=>{if(!t)return e.enqueue(r),n();e.close()}))}()})})).then((e=>{const t=e.getReader();return new Response(new ReadableStream({start(e){const s=()=>t.read().then((({done:t,value:i})=>{if(t)return void e.close();const a=new Uint8Array(i.buffer);for(let e=0;e<a.length;e++)n[r]=a[e],r++,r>=this.bufferSize&&(this.player.feed(n),r=0);return s()}));return s()}}))})).catch((e=>{}))}catch(e){console.error(e)}}stop(){try{this.player.pause(),this.controller.abort()}catch{err}console.warn(err),this.player=null,this.init()}init(){this.controller=new AbortController,this.audioBuffer=[],this.player=new PCMPlayer({inputCodec:this.inputCodec,channels:this.channels,sampleRate:this.sampleRate,flushTime:this.flushTime,onstatechange:(e,t,n)=>(console.log("type",e,t,n),{}),onended:(e,t)=>(console.log("end fire",e,t),{})}),this.player.volume(this.volume)}}export default CAudio;